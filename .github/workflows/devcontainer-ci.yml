name: Dev Container CI

on:
  push:
    branches: [master, dev]
  pull_request:

jobs:
  devcontainer-build:
    runs-on: ubuntu-latest
    env:
      CI: true
      ENV: ci
      SQL_SERVER_USER_CODESPACES: ${{ secrets.SQL_SERVER_USER_CODESPACES }}
      SQL_SERVER_PASSWORD_CODESPACES: ${{ secrets.SQL_SERVER_PASSWORD_CODESPACES }}
      SQL_SERVER_CONTAINER_SERVICE_CODESPACES: ${{ secrets.SQL_SERVER_CONTAINER_SERVICE_CODESPACES }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Build image
        # run: docker build -t lookout-app-ci .devcontainer/
        run: docker build -f .devcontainer/Dockerfile.ci -t lookout-app-ci .

      - name: Tag image for GHCR
        run: docker tag lookout-app-ci ghcr.io/${{ github.repository_owner }}/lookout-app-ci:latest

      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u coateds --password-stdin

      - name: Push image to GHCR
        run: docker push ghcr.io/${{ github.repository_owner }}/lookout-app-ci:latest

      - name: Start SQL Server container
        run: |
          docker run -d \
            --name sqlserver \
            -e SA_PASSWORD='YourStrong!Passw0rd' \
            -e ACCEPT_EULA=Y \
            -p 1433:1433 \
            mcr.microsoft.com/mssql/server:2022-latest

      - name: Wait for SQL Server to be ready
        run: |
          for i in {1..10}; do
            nc -z localhost 1433 && echo "‚úÖ SQL Server is up" && break
            echo "‚è≥ Waiting for SQL Server..."
            sleep 5
          done

      - name: Patch CI config filename
        run: mv .devcontainer/devcontainer.ci.json .devcontainer/devcontainer.json


      - name: Build and run inside devcontainer
        uses: devcontainers/ci@v0.3
        with:
          configFile: .devcontainer/devcontainer.json
          imageName: ghcr.io/${{ github.repository_owner }}/lookout-app-ci
          noCache: true
          env: |
            SQL_SERVER_USER_CODESPACES=${{ secrets.SQL_SERVER_USER_CODESPACES }}
            SQL_SERVER_PASSWORD_CODESPACES=${{ secrets.SQL_SERVER_PASSWORD_CODESPACES }}
            SQL_SERVER_CONTAINER_SERVICE_CODESPACES=${{ secrets.SQL_SERVER_CONTAINER_SERVICE_CODESPACES }}
          runCmd: |
            echo "‚úÖ Running inside devcontainer"
            echo "SQL_SERVER_USER_CODESPACES: ${SQL_SERVER_USER_CODESPACES:+[set]}"
            echo "SQL_SERVER_PASSWORD_CODESPACES: ${SQL_SERVER_PASSWORD_CODESPACES:+[set]}"
            echo "SQL_SERVER_CONTAINER_SERVICE_CODESPACES: ${SQL_SERVER_CONTAINER_SERVICE_CODESPACES:+[set]}"
            chmod +x .devcontainer/setup-env.sh
            bash .devcontainer/setup-env.sh
            echo "üîç .env contents:"
            cat .env

            echo "‚è≥ Waiting for SQL Server to be reachable..."
            for i in {1..10}; do
              if timeout 2 bash -c 'cat < /dev/null > /dev/tcp/sqlserver/1433'; then
                echo "‚úÖ SQL Server is reachable"
                break
              fi
              echo "‚è≥ Attempt $i: SQL Server not ready yet"
              sleep 2
            done

            # pytest

      - name: Start Flask app
        env:
          FLASK_APP: website:create_app
        run: |
          nohup flask run --host=0.0.0.0 --port=5000 &
          sleep 5

      - name: Curl test "/" route
        run: |
          # Wait a bit to ensure the Flask app is up (adjust as needed)
          sleep 10
          echo "Curling / route:"
          curl -v http://localhost:5000/
